package ch10; //초기화 처리 : 버튼, 테이블, 필드

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

public class Ch1002_GUI implements ActionListener, MouseListener {
	
	private JFrame frame;
	private JTextField tfScondition;
	private JLabel lbScondition;
	private JButton btnSearch;
	private JButton btnClear;
	private JTextField tfCode;
	private JLabel lbCode;
	private JLabel lbName;
	private JTextField tfName;
	private JTextField tfEmail;
	private JLabel lbEmail;
	private JTextField tfTel;
	private JLabel lbTel;
	private JLabel lbAsset;
	private JTextField tfAsset;
	private JLabel lbMSG;
	private JButton btnUpdate;
	private JButton btnInsert;
	private JButton btnDelete;
	private JScrollPane scrollPane;
	private JTable table;
	
	private String[] saTit 		= new String[] 	{"코드", "성명", "이메일", "전화번호", "자산"}; //타이틀
	private int[] 	 iaCwdith 	= new int[] 	{   10 ,    20 ,      80,         60,        100};	//폭
	private int[]	 iaAlm 		= new int[] 	{JLabel.RIGHT, JLabel.LEFT, JLabel.LEFT, JLabel.CENTER, JLabel.RIGHT}; //테이블내 정렬방법
	
	private DefaultTableModel dtModel; 	// AbstractTableModel을 상속받아 사용하는것 보다 효율적임

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Ch1002_GUI window = new Ch1002_GUI();
					window.frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public Ch1002_GUI() {
		initialize();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.setTitle("고객관리");
		frame.setBounds(100, 100, 750, 330);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().setLayout(null);
		
		tfScondition = new JTextField();
		tfScondition.setBounds(60, 23, 60, 21);
		frame.getContentPane().add(tfScondition);
		tfScondition.setColumns(10);
		
		lbScondition = new JLabel("*코드");
		lbScondition.setBounds(12, 26, 46, 15);
		frame.getContentPane().add(lbScondition);
		
		btnSearch = new JButton("조회");
		btnSearch.setBounds(516, 22, 97, 23);
		frame.getContentPane().add(btnSearch);
		btnSearch.addActionListener(this);
		
		btnClear = new JButton("초기화");
		btnClear.setBounds(625, 22, 97, 23);
		frame.getContentPane().add(btnClear);
		btnClear.addActionListener(this);
		
		tfCode = new JTextField();
		tfCode.setBounds(60, 200, 60, 21);
		frame.getContentPane().add(tfCode);
		tfCode.setColumns(10);
		
		lbCode = new JLabel("*코드");
		lbCode.setBounds(12, 203, 46, 15);
		frame.getContentPane().add(lbCode);
		
		lbName = new JLabel("*성명");
		lbName.setBounds(132, 203, 46, 15);
		frame.getContentPane().add(lbName);
		
		tfName = new JTextField();
		tfName.setBounds(181, 200, 60, 21);
		frame.getContentPane().add(tfName);
		tfName.setColumns(10);
		
		tfEmail = new JTextField();
		tfEmail.setBounds(297, 200, 110, 21);
		frame.getContentPane().add(tfEmail);
		tfEmail.setColumns(10);
		
		lbEmail = new JLabel("이메일");
		lbEmail.setBounds(253, 203, 57, 15);
		frame.getContentPane().add(lbEmail);
		
		tfTel = new JTextField();
		tfTel.setBounds(474, 200, 97, 21);
		frame.getContentPane().add(tfTel);
		tfTel.setColumns(10);
		
		lbTel = new JLabel("전화번호");
		lbTel.setBounds(419, 203, 57, 15);
		frame.getContentPane().add(lbTel);
		
		lbAsset = new JLabel("자산");
		lbAsset.setBounds(583, 203, 39, 15);
		frame.getContentPane().add(lbAsset);
		
		tfAsset = new JTextField();
		tfAsset.setBounds(625, 200, 97, 21);
		frame.getContentPane().add(tfAsset);
		tfAsset.setColumns(10);
		
		lbMSG = new JLabel("");
		lbMSG.setBounds(42, 255, 165, 15);
		frame.getContentPane().add(lbMSG);
		
		btnUpdate = new JButton("수정");
		btnUpdate.setEnabled(false);
		btnUpdate.setBounds(625, 247, 97, 23);
		frame.getContentPane().add(btnUpdate);
		btnUpdate.addActionListener(this);
		
		btnInsert = new JButton("등록");
		btnInsert.setBounds(516, 247, 97, 23);
		frame.getContentPane().add(btnInsert);
		btnInsert.addActionListener(this);
		
		btnDelete = new JButton("삭제");
		btnDelete.setEnabled(false);
		btnDelete.setBounds(407, 247, 97, 23);
		frame.getContentPane().add(btnDelete);
		btnDelete.addActionListener(this);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(22, 51, 700, 136);
		frame.getContentPane().add(scrollPane);
		
//		table = new JTable();
		
		// 테이블의 속성을 지정하여 테이블을 생성한다.
		
		// STEP 1. 테이블 모델을 생성한다.
		dtModel = new DefaultTableModel(saTit, 0);
		table = new JTable();
		// STEP 2. 테이블의 컬럼 출력형식을 새롭게 지정한다.
		// STEP 2-1. 테이블 컬럼을 생성하지 않게 한다.
		table.setAutoCreateColumnsFromModel(false);
		table.setModel(dtModel);
		
		for( int i = 0; i < iaAlm.length; i++)
		{
			// STEP 2-2. CELL 렌더러를 만들고, 각각의 셀에 정렬 방식을 지정한다.
			DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
			renderer.setHorizontalAlignment(iaAlm[i]);
			// STEP 2-3. 각각의 컬럼에 정렬 방식이 지정된 CELL 렌더러를 지정하고, 각 셀의 Width를 지정한다.
			TableColumn column = new TableColumn(i, iaCwdith[i], renderer, null);
			// STEP 2-4. 생성된 컬럼을 테이블에 추가한다.
			table.addColumn(column);
		}
		
		table.setFocusable(false); 			// 테이블 내에서 입력금지용
		scrollPane.setViewportView(table);
		table.addMouseListener(this);		// 마우스 리스너 장착
		
		
	}
	
	@Override
	public void actionPerformed(ActionEvent e) { 
		
		enableInit();
		
		if	   ( e.getSource() == btnInsert )
		{
			lbMSG.setText("등록버튼 클릭");
		}
		
		else if( e.getSource() == btnUpdate )
		{
			lbMSG.setText("수정버튼 클릭");
		}
		
		else if( e.getSource() == btnDelete )
		{
			lbMSG.setText("삭제버튼 클릭");
		}
		
		else if( e.getSource() == btnSearch )
		{
//			lbMSG.setText("조회버튼 클릭");
			if( tfScondition.getText().isEmpty() ) // 빈칸 확인 코드
			{
				JOptionPane.showMessageDialog(frame, "조회조건을 입력하세요."); //라이브러리로 제공되기에 객체생성없이 쓸수있음 (static method)
				return;
			}
			codes(); //호출
		}
		else if( e.getSource() == btnClear )
		{
			lbMSG.setText("초기화버튼 클릭");
			clear();
		}
		
	}
	
	public void codes()throws Exception{
		
		String driver   = "oracle.jdbc.driver.OracleDriver";
		String url 	    = "jdbc:oracle:thin:@localhost:1521:XE"; // localhost:port/db명
		String user     = "dev";
		String password = "123456";
		
		String sql, sqlKey;
		PreparedStatement pstmt, pstmtKey;	// 정적 SQL용 빈통 만들기, 동적은 prepareStatement
		ResultSet 		  rs, rsKey;
		
		int 	   n_code;
		String	   s_name, s_email, s_tel;
		BigDecimal bd_asset;
		
		int cnt;
		
		Class.forName(driver);		//driver를 메모리로 로딩
		System.out.println("Driver Loading Sucess");
		
		Connection con = DriverManager.getConnection(url, user, password);
		sql    = "SELECT * FROM CUSTOMER WHERE CODE >= 0 ORDER BY CODE";
		pstmt  = con.prepareStatement(sql);
		rs 	   = pstmt.executeQuery();	// select용, CUD는 executeUpdate
		
		cnt = 0;
		
		while (rs.next())				//data fetch, 다건조회
		{
			System.out.print(rs.getInt(1)	  + "\t");
			System.out.print(rs.getString(2)  + "\t");
			System.out.print(rs.getString(3)  + "\t");
			System.out.print(rs.getString(4)  + "\t");
			System.out.println(rs.getBigDecimal(5)); 	//double보다 더 큰자릿수 수용가능
			
			cnt++;
		}
		
		
		lbMSG.setText("정상조회 되었습니다.");
	}
	
	@Override
	public void mouseClicked(MouseEvent e){
		int row; 									//선택된 테이블의 행값
//		int col;									//선택된 테이블의 열값
		
		if(e.getSource() == table)
		{
			JTable jtable = (JTable)e.getSource();  //꼭 필요하진 않지만 소스간략화를 위해 씀
//			row = (JTable)e.getSource().getSelectedRow();
			row = jtable.getSelectedRow();
//			col = jtable.getSelectedColumn();
//			System.out.println(row + "," + col);
			
			lbMSG.setText("");						//메세지 초기화
			
			if( row > -1)							// table에서 특정 행을 클릭한 경우
			{
				tfCode.setText(  (String)table.getValueAt(row, 0) );
				tfCode.setEnabled(false); 			//코드 항목은 수정대상이 아니므로 disable
				tfName.setText(  (String)table.getValueAt(row, 1) );
				tfEmail.setText( (String)table.getValueAt(row, 2) );
				tfTel.setText(   (String)table.getValueAt(row, 3) );
				tfAsset.setText( (String)table.getValueAt(row, 4) );
				
				btnInsert.setEnabled(false);		 //등록버튼 disable
				btnUpdate.setEnabled(true);
				btnDelete.setEnabled(true);
			}
		}
	}
		@Override
		public void mouseEntered(MouseEvent arg0){
		}
		@Override
		public void mouseExited(MouseEvent arg0){
		}
		@Override
		public void mousePressed(MouseEvent arg0){
		}
		@Override
		public void mouseReleased(MouseEvent arg0){
		}
		
		public void enableInit()
		{
			tfCode.setEnabled(true);
			btnInsert.setEnabled(true);
			btnUpdate.setEnabled(false);
			btnDelete.setEnabled(false);
		}
		
		public void clear()
		{
			
			tfScondition.setText("");
			
			lbMSG.setText("");
			
			dtModel.setRowCount(0);
			
			tfCode.setText("");
			tfName.setText("");
			tfEmail.setText("");
			tfTel.setText("");
			tfAsset.setText("");
		}
		
}
	

