#include <stdio.h>
#include <stdlib.h>

//insertNode를 재귀호출에서 반복문으로 수정, deleteNode 수정(자식이 없는 노드만 삭제) 및 root를 전역변수로 설정

typedef struct treeNode
{
	char key;				// 데이터 필드
	struct treeNode* left;	// 왼쪽 서브 트리 링크 필드
	struct treeNode* right;	// 오른쪽 서브 트리 링크 필드
} treeNode;

treeNode *root = NULL;

// 이진 탐색 트리에서 키값이 x인 노드의 위치를 탐색하는 연산
treeNode *search( char x )
{
	treeNode* p;
	return p;
}

// 포인터 p가 가리키는 노드와 비교하여 노드 x를 삽입하는 연산
void insertNode( char x ) {
	treeNode *newNode;
	treeNode *p = root;
	treeNode *parent = NULL;

	while( p != NULL){
		parent = p;
		if( x < p -> key)
			p = p->left;
		else if( x == p ->key){
			printf("\n already exist \n");
			return;
		}
		else
			p = p -> right;

	newNode = (treeNode*)malloc(sizeof(treeNode));
	if(newNode == NULL){
		printf("fail");
		exit(1);
	}

	newNode->key =x;
	newNode->left =NULL;
	newNode->right =NULL;

	if (parent == NULL){
		root = newNode;
	}
	else{
		if( x < parent ->key)
			parent->left = newNode;
		else
			parent->right = newNode;
	}

}

// 루트 노드부터 탐색하여 키값과 같은 노드를 찾아 삭제하는 연산
void deleteNode( char key )
{
}

// 이진 탐색 트리를 중위 순회하면서 출력하는 연산
void displayInorder( treeNode *cur ){
	if ( cur ) {
		displayInorder(cur->left);
		printf("%c_", cur->key);
		displayInorder(cur->right);
	}
}

void menu() {
	printf("\n*---------------------------*");
	printf("\n\t1 : 트리 출력");
	printf("\n\t2 : 문자 삽입");
	printf("\n\t3 : 문자 삭제");
	printf("\n\t4 : 문자 검색");
	printf("\n\t5 : 종료");
	printf("\n*---------------------------*");
	printf("\n메뉴입력 >> ");
}

int main() {
	treeNode* foundedNode = NULL;
	char choice, key;

	// [그림 7-38]과 같은 초기 이진 탐색 트리를 구성하고
	// 노드 G를 루트 노드 포인터 root로 지정
	insertNode('G');
	insertNode('I');
	insertNode('H');
	insertNode('C');
	insertNode('B');
	insertNode('M');
	insertNode('N');
	insertNode('A');
	insertNode('J');
	insertNode('E');
	insertNode('D');
	insertNode('Q');

	while (1) {
		menu();
		fflush(stdout);
		scanf(" %c", &choice);

		switch (choice - '0') {
		case 1:
//			printf("\t[이진 트리 출력]  ");
			displayInorder( root );  printf("\n");
			break;

		case 2:
			printf("삽입할 문자를 입력하세요 : ");
			fflush(stdout);
			scanf(" %c", &key);
			insertNode(key);
			displayInorder( root );  printf("\n");
			break;

		case 3:
			printf("삭제할 문자를 입력하세요 : ");
		    fflush(stdout);
			scanf(" %c", &key);
			deleteNode(key);
			displayInorder( root );  printf("\n");
			break;

		case 4:
			printf("찾을 문자를 입력하세요 : ");
			fflush(stdout);
			scanf(" %c", &key);
			foundedNode = search(key);
			if (foundedNode != NULL)
				printf("\n %c를 찾았습니다! \n", foundedNode->key);
			else
				printf("\n 문자를 찾지 못했습니다. \n");
			break;

		case 5:
			return 0;

		default:
			printf("없는 메뉴입니다. 메뉴를 다시 선택하세요! \n");
			break;
		}
	}
	return 0;

}
